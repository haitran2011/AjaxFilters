@model VendorFilterModelSpikes

@inject NopAjaxFiltersSettings nopAjaxFiltersSettings

@{
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Spikes.Nop.Plugins.AjaxFilters/Scripts/VendorFilter.min.js");

    string toggleStateClass = "toggleControl";
    string toggleStateStyles = string.Empty;

    if (nopAjaxFiltersSettings.CloseVendorsFilterBox)
    {
        toggleStateClass = "toggleControl closed";
        toggleStateStyles = "display: none;";
    }

    string filtersPanelClass = nopAjaxFiltersSettings.FiltersUIMode == FiltersUIMode.UseCheckboxes ? "filtersCheckboxPanel" : "filtersDropDownPanel";
}

@functions {
    string GetOptionAttributes(FilterItemState state)
    {
        string optionAttributes = string.Empty;

        if (state == FilterItemState.Checked || state == FilterItemState.CheckedDisabled)
        {
            if (nopAjaxFiltersSettings.FiltersUIMode == FiltersUIMode.UseCheckboxes)
            {
                optionAttributes += "checked=\"checked\"";
            }
            else
            {
                optionAttributes += "selected=\"selected\"";
            }
        }

        if (state == FilterItemState.Disabled || state == FilterItemState.CheckedDisabled)
        {
            optionAttributes += " disabled=\"disabled\"";
        }

        return optionAttributes;
    }

    IHtmlContent GetListOfOptions(IList<VendorFilterItem> vendorFilterItems, FiltersUIMode uiMode)
    {
        HtmlContentBuilder result = new HtmlContentBuilder();

        foreach (var filterItem in vendorFilterItems)
        {
            string optionAttributes = GetOptionAttributes(filterItem.FilterItemState);
            string inputId = string.Format("vendor-input-{0}", filterItem.Id);

            if (uiMode == FiltersUIMode.UseCheckboxes)
            {
                result.AppendHtml("<li class=\"checkbox-item\">");
                result.AppendHtml($"<input {optionAttributes} data-option-ids=\"{filterItem.Id}\" type=\"checkbox\" id=\"{inputId}\" />");
                result.AppendHtml($"<label class=\"filter-item-name\" for=\"{inputId}\">{filterItem.Name}<span class=\"filter-item-count\" for=\"{inputId}\">({filterItem.FilterCount})</label>");
                result.AppendHtml("</li>");
            }
            else
            {
                result.AppendHtml($"<option @optionAttributes data-option-ids=\"{filterItem.Id}\" value=\"{filterItem.Name}\">{filterItem.Name}<span class=\"filter-item-count\" for=\"{inputId}\">({filterItem.FilterCount})</option>");
            }
        }

        return result;
    }
}

<div class="block filter-block vendorFilterPanelSpikes">
    <div class="title">
        <a class="@toggleStateClass">@T("Vendors")</a>
        <a class="clearFilterOptions">@T("Spikes.NopAjaxFilters.Client.Common.Clear")</a>
    </div>
    <div class="filtersGroupPanel @filtersPanelClass" style="@toggleStateStyles">
        @if (nopAjaxFiltersSettings.FiltersUIMode == FiltersUIMode.UseCheckboxes)
        {
            <ul class="checkbox-list">
                @GetListOfOptions(Model.VendorFilterItems, nopAjaxFiltersSettings.FiltersUIMode)
            </ul>
        }
        else
        {
            <select class="attribute-options-select" id="vendorFiltersDropDown">
                <option value="0">@T("Spikes.NopAjaxFilters.Client.Common.All")</option>
                @GetListOfOptions(Model.VendorFilterItems, nopAjaxFiltersSettings.FiltersUIMode)
            </select>
        }
    </div>
</div>